# yaml-language-server: $schema=../apps/monospace/schemas/monospace.schema.json
go_mod_prefix: github.com/software-t-rex/monospace
js_package_manager: ^pnpm@8.14.3
preferred_output_mode: grouped
projects:
    apps/monospace: internal
    gomodules/go-jobexecutor: git@github.com:software-t-rex/go-jobExecutor.git
    gomodules/js-packagemanager: git@github.com:software-t-rex/js-packagemanager.git
    gomodules/packageJson: git@github.com:software-t-rex/packageJson.git
    gomodules/scaffolders: internal
    gomodules/ui: internal
    gomodules/utils: internal
    packages/monospace: internal
projects_aliases:
    executor: gomodules/go-jobexecutor
    jspm: gomodules/js-packagemanager
    monospace: apps/monospace
    npmpkg: packages/monospace
    packageJson: gomodules/packageJson
    ui: gomodules/ui
    utils: gomodules/utils
pipeline:
    executor#difforigin:
        cmd: [git, diff, --name-only, origin/main]
    executor#test:
        cmd: [test.sh]
    jspm#difforigin:
        cmd: [git, diff, --name-only, origin/main]
    jspm#test:
        cmd: [test.sh]
        dependsOn: [packageJson#test]
    monospace#build:
        cmd: [goreleaser, release, --clean, --skip-publish]
        dependsOn: [monospace#test]
        output_mode: interleaved
    monospace#buildnext:
        description: Build the next version of monospace for development (linux only)
        cmd: [goreleaser, build, --config, ./.goreleaser-next.yaml, --id, monospace-next, --snapshot, --clean, --single-target]
        output_mode: interleaved
    monospace#doc:
        description: Generate markdown doc and man files
        cmd: [./gendoc.sh, -md, -man]
    monospace#test:
        cmd: [test.sh]
        dependsOn: [packageJson#test, executor#test, jspm#test, ui#test]
        output_mode: status-only
    npmpkg#build: {}
    npmpkg#cleanup: {}
    npmpkg#update-package-json:
        description: Run update-package-json script from packages/monospace/package.json
    packageJson#difforigin:
        cmd: [git, diff, --name-only, origin/main]
    packageJson#test:
        cmd: [test.sh]
    root#difforigin:
        cmd: [git, diff, --name-only, origin/main]
    tidy:
        cmd: [/bin/bash, -c, 'if [ -f go.mod ]; then go mod tidy; else echo ''no go.mod file => skipped'';fi']
        output_mode: grouped
    ui#test:
        cmd: [test.sh]
